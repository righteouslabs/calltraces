# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Calltraces Python Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION_FOR_PUBLISH: "3.10"

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }} 🐍
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add conda to system path ➡️
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install dependencies ⬇️
      run: |
        # Update Conda
        conda update -n base -c defaults conda

        # Update Conda packages
        conda env update --file environment.yml --name base

    - name: Run pre-commit checks ✔️
      uses: pre-commit/action@v3.0.0

    - name: Lint with flake8 📐
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --statistics

    - name: Lint with Black 📐
      run: |
        # stop the build if there are Python issues with Black
        python -m black --check .

    - name: Test with pytest 🧪
      run: |
        python -m pytest

    - name: Set target python package version
      run: |
        echo "PACKAGE_SHORT_VERSION::$(date +'%-Y.%-m.%-d')" >> $GITHUB_ENV
        echo "PACKAGE_LONG_VERSION::$(date +'%-Y.%-m.%-d.%-H%-M')" >> $GITHUB_ENV

    - name: Build a binary wheel and a source tarball 🚧
      with:
        python-version: ${{ env.PYTHON_VERSION_FOR_PUBLISH }}
      run: |
        # Create temp file to store HTTP data
        TMPFILE=$(mktemp)

        # Check if Python package with target version is available
        HTTP_CODE=$(curl \
          --write-out "%{http_code}\n" \
          --header 'Accept: application/json' \
          "https://test.pypi.org/pypi/calltraces/$PACKAGE_SHORT_VERSION/json" \
          --output $$TMPFILE \
          --silent \
        )

        # Remove target file
        rm $TMPFILE

        # Define target PyPi package version
        if [[ $HTTP_CODE == 404 ]];
        then
          echo "TESTPYPI_PACKAGE_VERSION::$PACKAGE_SHORT_VERSION" >> $GITHUB_ENV;
        else
          echo "TESTPYPI_PACKAGE_VERSION::$PACKAGE_LONG_VERSION" >> $GITHUB_ENV
        fi

        # Build the python package
        python -m build --sdist --wheel --outdir dist/ .

    - name: Publish distribution 📦 to Test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        python-version: ${{ env.PYTHON_VERSION_FOR_PUBLISH }}
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
